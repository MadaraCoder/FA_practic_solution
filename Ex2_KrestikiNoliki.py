# Массив 3 строки на 3 столбца служит игровым полем
# Map - с большой буквы чтобы не путалось с внутренней функцией пайтона (map)
Map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]

# Если эта переменная равна True - то сейчас ход первого игрока, если False - то второго
first_player_turn = True
# Главный игровой цикл
running = True
while running:
    # Вывод каждого элемента каждой строки через разделитель ' | '
    for row in Map:
        print((' | '.join(str(col) for col in row)))

    # Ввод будет происходить до тех пор, пока не будет введена свободная ячейка
    while True:
        # Если ход первого игрока, выводится просьба к ходу для первого, иначе - для второго
        if first_player_turn:
            print('\nПервый Игрок, вводите координаты точки')
        else:
            print('\nВторой Игрок, вводите координаты точки')

        # Затем вводятся координаты строки и столбца, в которую ставится отметка
        i, j = int(input('Строка (0 1 2) : ')), int(input('Столбец (0 1 2) : '))

        # Для начала проверяется является ли ячейка пустой
        if Map[i][j] == '-':
            # Если ход первого игрока ставится отметка - X, если второго то - O
            if first_player_turn:
                Map[i][j] = 'X'
            else:
                Map[i][j] = 'O'
            break
        else:
            print('\nЯчейка уже занята, попробуйте ввести другую!!! ==================================================')

    # Здесь проверка на выполнение условия окончания игры
    if (len(set(Map[0])) == 1 and Map[0][0] != '-') or (len(set(Map[1])) == 1 and Map[1][0] != '-') \
            or (len(set(Map[2])) == 1 and Map[2][0] != '-'):
        break
    elif (len({Map[0][0], Map[1][0], Map[2][0]}) == 1 and Map[0][0] != '-') \
            or (len({Map[0][1], Map[1][1], Map[2][1]}) == 1 and Map[0][1] != '-') \
            or (len({Map[0][2], Map[1][2], Map[2][2]}) == 1 and Map[0][2] != '-'):
        break
    elif (len({Map[0][0], Map[1][1], Map[2][2]}) == 1 and Map[0][0] != '-') \
            or (len({Map[0][2], Map[1][1], Map[2][0]}) == 1 and Map[1][1] != '-'):
        break

    # Затем происходит смена хода
    first_player_turn = not first_player_turn


# После окончания игрового цикла, поле выводится еще один раз
# -----------------------------------------------------------
# Вывод каждого элемента каждой строки через разделитель ' | '
for row in Map:
    print((' | '.join(str(col) for col in row)))

# По правилам игры если проигрышная комибинация попалась на ход первого игрока, то побеждает второй - и наоборот
# Но так-как в конце игрового цикла ход сменяется, вывод инвертирован
if first_player_turn:
    print('\nПервый Игрок победил!\nИгра завершена!')
else:
    print('\nВторой Игрок победил!\nИгра завершена!')
